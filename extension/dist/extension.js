(()=>{"use strict";var e={21:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.getNonce=function(){let e="";for(let n=0;n<32;n++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return e}},265:function(e,n,o){var t=this&&this.__awaiter||function(e,n,o,t){return new(o||(o=Promise))((function(s,i){function r(e){try{l(t.next(e))}catch(e){i(e)}}function a(e){try{l(t.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?s(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(r,a)}l((t=t.apply(e,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.executionLogData=void 0,n.executeFile=function(e){const n=r.extname(e);let o;if(".js"===n)o=`node "${e}"`;else if(".py"===n)o=`python "${e}"`;else{if(".sh"!==n)return void s.window.showErrorMessage(`Unsupported file type: ${n}`);o=`sh "${e}"`}(0,a.exec)(o,((e,n,o)=>{e?s.window.showErrorMessage(`Execution Error: ${e.message}`):(s.window.showInformationMessage(`Output:\n${n}`),o&&console.error(`Execution Stderr: ${o}`))}))},n.activate=function(e){console.log('Congratulations, your extension "codeflow" is now active!'),e.subscriptions.push(s.commands.registerCommand("codeflow.graphGenerator",(()=>{i.InitialPanel.createOrShow(e.extensionUri)}))),e.subscriptions.push(s.commands.registerCommand("codeflow.refresh",(()=>{i.InitialPanel.kill(),i.InitialPanel.createOrShow(e.extensionUri)}))),e.subscriptions.push(s.commands.registerCommand("codeflow.executeFile",(()=>t(this,void 0,void 0,(function*(){i.InitialPanel.currentPanel?i.InitialPanel.currentPanel._executeFile():s.window.showErrorMessage("Please open CodeFlow first")}))))),e.subscriptions.push(s.commands.registerCommand("codeflow.askQuestion",(()=>t(this,void 0,void 0,(function*(){const e=yield s.window.showInformationMessage("How are you?","Good","Bad");"Good"===e?s.window.showInformationMessage("I am glad to hear that!"):"Bad"===e&&s.window.showInformationMessage("I am sorry to hear that!")})))))},n.deactivate=function(){};const s=o(398),i=o(860),r=o(928),a=o(317);n.executionLogData=""},317:e=>{e.exports=require("child_process")},398:e=>{e.exports=require("vscode")},860:function(e,n,o){var t=this&&this.__awaiter||function(e,n,o,t){return new(o||(o=Promise))((function(s,i){function r(e){try{l(t.next(e))}catch(e){i(e)}}function a(e){try{l(t.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?s(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(r,a)}l((t=t.apply(e,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.InitialPanel=void 0;const s=o(398),i=o(317),r=o(21),a=o(928);class l{static kill(){l.currentPanel&&(l.currentPanel.dispose(),l.currentPanel=void 0)}static createOrShow(e){const n=s.window.activeTextEditor?s.window.activeTextEditor.viewColumn:void 0;if(l.currentPanel)return void l.currentPanel._panel.reveal(n);const o=s.window.createWebviewPanel(l.viewType,"CodeFlow",n||s.ViewColumn.One,{enableScripts:!0,localResourceRoots:[s.Uri.joinPath(e,"media"),s.Uri.joinPath(e,"out/compiled")]});l.currentPanel=new l(o,e)}constructor(e,n){this._disposables=[],this._panel=e,this._extensionUri=n,this._update(),this._panel.onDidDispose((()=>this.dispose()),null,this._disposables),this._panel.webview.onDidReceiveMessage((e=>t(this,void 0,void 0,(function*(){switch(e.type){case"executeFile":yield this._executeFile();break;case"onInfo":if(!e.value)return;if(s.window.showInformationMessage(e.value),!e.value)return;if(s.window.showErrorMessage(e.value),!e.value)return;s.window.showErrorMessage(e.value)}}))),null,this._disposables)}_executeFile(){return t(this,void 0,void 0,(function*(){const e=yield s.workspace.findFiles("**/*");if(0===e.length)return void s.window.showInformationMessage("No files found in the workspace.");const n=yield s.window.showQuickPick(e.map((e=>e.fsPath)),{placeHolder:"Select a file to execute"});if(!n)return;const o=a.join(this._extensionUri.fsPath,"logs");yield s.workspace.fs.createDirectory(s.Uri.file(o)),(0,i.exec)(`node "${n}"`,((e,i,r)=>t(this,void 0,void 0,(function*(){const t=`File: ${n}\nOutput:\n${i}\nError:\n${r}\n\nExecuted at: ${(new Date).toISOString()}\n\n`,l=a.join(o,"execution.log");try{yield s.workspace.fs.writeFile(s.Uri.file(l),Buffer.from(t,"utf8")),this._panel.webview.postMessage({type:"log",content:t}),s.window.showInformationMessage(`Logs saved to ${l}`)}catch(e){s.window.showErrorMessage(`Failed to save logs: ${e.message}`)}e&&s.window.showErrorMessage(`Execution Error: ${e.message}`)}))))}))}dispose(){for(l.currentPanel=void 0,this._panel.dispose();this._disposables.length;){const e=this._disposables.pop();e&&e.dispose()}}_update(){const e=this._panel.webview;this._panel.webview.html=this._getHtmlForWebview(e)}_getHtmlForWebview(e){return e.asWebviewUri(s.Uri.joinPath(this._extensionUri,"media","main.js")),e.asWebviewUri(s.Uri.joinPath(this._extensionUri,"css","styles.css")),e.asWebviewUri(s.Uri.joinPath(this._extensionUri,"media","vscode.css")),(0,r.getNonce)(),'<!DOCTYPE html>\n<html>\n<head>\n  <title>Dynamic Graph</title>\n  <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"><\/script>\n  <style>\n    #mynetwork {\n      width: 100%;\n      height: 600px;\n      border: 1px solid lightgray;\n    }\n  </style>\n</head>\n<body>\n  <div id="mynetwork"></div>\n\n  <script>\n    const SERVER_URL = "ws://localhost:3000";\n    const socket = new WebSocket(SERVER_URL);\n    const allMessages = [];\n\n    // vis.js DataSets\n    const nodes = new vis.DataSet([]);\n    const edges = new vis.DataSet([]);\n    let uniqueIdCounter = 1;\n    \n    function generateUniqueId() {\n      return uniqueIdCounter++;\n    }\n\n    let nodeIds = [];\n    const container = document.getElementById(\'mynetwork\');\n    const data = { nodes, edges };\n    const options = {\n      nodes: {\n        shape: \'dot\',\n        size: 20\n      },\n      edges: {\n        color: \'gray\',\n        arrows: {\n          to: { enabled: true, scaleFactor: 0.5 }\n        }\n      },\n      physics: {\n        enabled: true,\n        solver: \'forceAtlas2Based\'\n      }\n    };\n\n    const network = new vis.Network(container, data, options);\n\n    function rebuildGraph() {\n      nodes.clear();\n      edges.clear();\n      nodeIds = [];\n\n      // Sort allMessages by raw_json.sequence\n      allMessages.sort((a, b) => {\n        const seqA = a.raw_json?.sequence ?? 0;\n        const seqB = b.raw_json?.sequence ?? 0;\n        return seqA - seqB;\n      });\n\n      // First pass: create exactly one node per message\n      for (let i = 0; i < allMessages.length; i++) {\n        const msg = allMessages[i];\n        const { raw_json } = msg;\n        const { method, status, error, stackTrace } = raw_json;\n\n        // Decide color and shape based on error type\n        let color = "gray";\n        let shape = "dot";\n        let size = 20;\n        \n        if (status === "error") {\n          color = "red";\n          shape = "diamond"; // Error nodes are diamonds\n          size = 25;\n        } else if (status === "success") {\n          color = "green";\n        }\n\n        // Create a brand-new node for this message\n        const newNodeId = generateUniqueId();\n        nodeIds.push(newNodeId);\n\n        // Create detailed tooltip with error info\n        let tooltip = "Function: " + method + "\\nStatus: " + status;\n        if (error) {\n          tooltip += "\\nError: " + error;\n        }\n        if (stackTrace) {\n          tooltip += "\\n\\nStack Trace:\\n" + stackTrace;\n        }\n        if (raw_json.parameters) {\n          tooltip += "\\n\\nParameters: " + JSON.stringify(raw_json.parameters, null, 2);\n        }\n\n        // Add to nodes DataSet\n        nodes.add({\n          id: newNodeId,\n          label: method || "unknown",\n          color: color,\n          shape: shape,\n          size: size,\n          title: tooltip,\n          font: {\n            size: status === "error" ? 14 : 12,\n            bold: status === "error"\n          }\n        });\n      }\n\n      // Second pass: create edges based on next_calls\n      for (let i = 0; i < allMessages.length; i++) {\n        const fromMsg = allMessages[i];\n        const fromSeq = fromMsg.raw_json?.sequence ?? 0;\n        const fromNodeId = nodeIds[i];\n        const nextCalls = fromMsg.raw_json?.next_calls || [];\n\n        // For each next_call in fromMsg\n        nextCalls.forEach(callName => {\n          // Find a future message whose raw_json.method == callName\n          // and has a sequence > fromSeq\n          let bestJ = null;\n          let bestSeq = Infinity;\n\n          for (let j = 0; j < allMessages.length; j++) {\n            if (j === i) continue; // don\'t link to itself\n            const toMsg = allMessages[j];\n            const toSeq = toMsg.raw_json?.sequence ?? 0;\n            if (\n              toSeq > fromSeq && \n              toMsg.raw_json?.method === callName &&\n              toSeq < bestSeq\n            ) {\n              bestJ = j;\n              bestSeq = toSeq;\n            }\n          }\n\n          // If we found a suitable future message, link them\n          if (bestJ !== null) {\n            edges.add({\n              from: fromNodeId,\n              to: nodeIds[bestJ]\n            });\n          }\n        });\n      }\n    }\n\n    // Socket events\n    socket.onopen = () => {\n      console.log("Connected to WebSocket Server at " + SERVER_URL);\n    };\n\n    socket.onmessage = (event) => {\n      try {\n        const jsonData = JSON.parse(event.data);\n        console.log("Received WebSocket data:", jsonData);\n        allMessages.push(jsonData);\n        rebuildGraph();\n      } catch (error) {\n        console.error("Error parsing WebSocket data:", error);\n      }\n    };\n\n    socket.onclose = () => {\n      console.log("WebSocket disconnected from " + SERVER_URL);\n    };\n  <\/script>\n</body>\n</html>\n'}}n.InitialPanel=l,l.viewType="initial"},928:e=>{e.exports=require("path")}},n={},o=function o(t){var s=n[t];if(void 0!==s)return s.exports;var i=n[t]={exports:{}};return e[t].call(i.exports,i,i.exports,o),i.exports}(265);module.exports=o})();